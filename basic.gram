TO INPUT STATEMENT:
    base_statement_class_name = 'Statement'
    statement_grammar_definition = [
        'Block      : List<Statement> statements',
        'Expression : Expr expression',          
        'If         : Expr condition, Statement then_branch, Statement else_branch',
        'Print      : Expr expression',
        'Var        : Token name, Expr initializer',
        'While      : Expr condition, Statement then_branch',
    ]

TO INPUT EXPRESSION:
    base_statement_class_name = 'Statement'
    statement_grammar_definition = [
        'Block      : List<Statement> statements',
        'Expression : Expr expression',
        'Function   : Token token_obj, List<Token> param_token_objs, List<Stmt> body',
        'If         : Expr condition, Statement then_branch, Statement else_branch',
        'Print      : Expr expression',
        'Var        : Token token_obj, Expr initializer',
        'While      : Expr condition, Statement then_branch',
    ]



===========
More formal definition for the grammer below
===========


expression → literal
           | unary
           | binary
           | grouping ;

literal    → NUMBER | STRING | "true" | "false" | "nil" ;
grouping   → "(" expression ")" ;
unary      → ( "-" | "!" ) expression ;
binary     → expression operator expression ;
operator   → "==" | "!=" | "<" | "<=" | ">" | ">="
           | "+"  | "-"  | "*" | "/" ;


program     → declaration* EOF ;

declaration → varDecl
            | statement ;

statement   → exprStmt
            | printStmt ;





expression     → assignment ;
assignment → IDENTIFIER "=" assignment | equality ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition       → multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | primary ;
primary        → NUMBER | STRING | "false" | "true" | "nil"
               | "(" expression ")" ;